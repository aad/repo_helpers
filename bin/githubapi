#!/usr/bin/env bash
set -ef -o pipefail
source $(dirname $0)/bash_helpers/bash_helpers

while getopts ":-:" OPTIONS; do 
  case $OPTIONS in 
  *) case $OPTARG in
  u|username) getarg GITHUB_USER ;;
  private) private="true" ;;
  public) private="false" ;;
  o|orgname) 
    getarg GITHUB_ORGANISATION 
    : ${private:="true"}
    github_namespace="${GITHUB_ORGANISATION}"
    users_orgs="orgs"
    ;;
  s|short) SHORT=1 ;;
  r|raw_output) RAW_JSON_OUTPUT=1 ;;
  p|page) getarg PAGE ;;
esac; esac; done
shift $((OPTIND - 1))

read_rc_file

: ${private:="false"}
: ${github_namespace:="${GITHUB_USER}"}
: ${users_orgs:="users"}

[[ -z "$GITHUB_USER" ]] && { echo "github user must be specified." >&2; exit 1; }


if [[ "$1" = "create" ]]; then
  shift
  REPO_NAME="$1";shift
  [[ -z "$REPO_NAME" ]] && { echo "repository name must be specified." >&2; exit 1; }
  [[ -n "$@" ]] && DESCRIPTION="$@"

  if [[ -n $GITHUB_ORGANISATION ]];then
    url="https://api.github.com/orgs/${GITHUB_ORGANISATION}/repos"
  else
    url="https://api.github.com/user/repos"
  fi
  curl -i \
    -X POST \
    -u "${GITHUB_USER}:$(get_password)" \
-d "{\"name\":\"${REPO_NAME}\",\"description\":\"${DESCRIPTION}\",\"auto_init\":true,\"has_issues\":false,\"has_wiki\":false,\"has_downloads\":false,\"private\":${private}}" \
$url

elif [[ "$1" = "clonecreate" ]]; then
  shift
  $0 create $@
  $0 clone $@

elif [[ "$1" = "delete" ]]; then #!#
  shift
  REPO_NAME="$1"; shift
  [[ -z "$REPO_NAME" ]] && { echo "repository name must be specified." >&2; exit 1; }
  read -p "If you are sure to delete Github Repository: '${REPO_NAME}' please type in the name again: " ENTERED_REPO_NAME
  [[ "$REPO_NAME" != "$ENTERED_REPO_NAME" ]] && {
    echo "Entered Repository name: '${ENTERED_REPO_NAME}' does not match: '${REPO_NAME}'" >&2; exit 1;
  }
  curl -i \
    -X DELETE \
    -u "$GITHUB_USER:$(get_password)" \
"https://api.github.com/repos/${github_namespace}/${REPO_NAME}"

elif [[ "$1" = "clone" ]]; then #!#
  shift
  [[ -n "$1" ]] && { : ${REPO_NAME:="$1"}; shift; }
  [[ -z "$REPO_NAME" ]] && { echo "no repository name specified."; exit 1; }
  git clone git@github.com:${github_namespace}/${REPO_NAME}.git

elif [[ "$1" = "info" ]]; then #!#
  shift
  REPO_NAME="$1"; shift
  [[ -z "$REPO_NAME" ]] && { echo "repository name must be specified." >&2; exit 1; }
  curl -s \
    -u "$GITHUB_USER:$(get_password)" \
"https://api.github.com/repos/${github_namespace}/${REPO_NAME}"

elif [[ "$1" = "hooks" ]]; then #!#
  shift
  REPO_NAME="$1"; shift
  [[ -z "$REPO_NAME" ]] && { echo "repository name must be specified." >&2; exit 1; }
  curl -s \
    -u "$GITHUB_USER:$(get_password)" \
"https://api.github.com/repos/${github_namespace}/${REPO_NAME}/hooks"

elif [[ "$1" = "list" ]]; then #!#
  shift
  RESPONSE="$(curl -s \
    -u "$GITHUB_USER:$(get_password)" \
    "https://api.github.com/${users_orgs}/${github_namespace}/repos?\
type=all\
${PAGE+"&page=$PAGE"}\
&per_page=100" \
      )"
#TODO is 100 the max for entries per page ?

  if [[ "$RAW_JSON_OUTPUT" -eq 1 ]];then
    echo "$RESPONSE"
  else
    echo "$RESPONSE" \
      | jq -M 'map({name,description,ssh_url})' \
      | jq -M -r '.[].name'
  fi

elif [[ "$1" = "add_docker_service" ]]; then #!#
  shift
  REPO_NAME="$1"; shift
  [[ -z "$REPO_NAME" ]] && { echo "repository name must be specified." >&2; exit 1; }
  curl -s \
    -u "$GITHUB_USER:$(get_password)" \
    -X POST \
    --data-binary '{"name":"docker","active":true,"events":["push"],"config":{}}' \
    "https://api.github.com/repos/${github_namespace}/${REPO_NAME}/hooks"

fi
