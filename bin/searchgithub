#!/usr/bin/env bash

set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

function urlencode_local() {
  echo -n "$@" \
  | tr ' ' '+' \
  | while IFS= read -n 1 C; do 
    case $C in
        [a-zA-Z0-9+.~_-]) printf "$C" ;;
        *) printf '%%%02X' "'$C" ;; 
    esac
  done
  printf '\n'
}

while getopts "h?p:s:rq" options; do case $options in
  p) page="$OPTARG" ;;
  s) page_size="$OPTARG" ;;
  r) raw_output="1" ;;
  q) show_query="1" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

: ${rc_file:="${HOME}/.searchgithub_rc"}
if [[ -r "${rc_file}" ]]; then
  if ( cd $( dirname $(realpath "$rc_file")); git diff-index --quiet HEAD -- ) && \
     ( cd $( dirname $(realpath "$rc_file")); git ls-files $(realpath "$rc_file") --error-unmatch ); then
    source "${rc_file}"
  else
    echo "the rc file was either not in git or uncommitted changes found" >&2
    exit 1
  fi
fi

: ${github_namespace:="$github_user"}
# : ${users_orgs:="orgs"}
: ${users_orgs:="users"}
: ${raw_output:="0"}
: ${page_size:="100"} # max is 100
: ${page:="1"}
: ${show_query:="0"}

if [[ "$#" -eq 0 ]];then
  :

elif [[ "$1" = "limits" ]]; then shift
  curl \
    -i \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/rate_limit"

elif [[ "$1" = "list" ]]; then shift
  #TODO is 100 the max for entries per page ?
  user_name="$1"
  response="$(curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/${users_orgs}/${user_name}/repos?\
type=all\
&page=${page}&per_page=${page_size}\
" )"

  if [[ "$raw_output" -eq 1 ]];then
    echo "$response"
  else
    echo "$response" \
      | jq -M 'map({name,description,ssh_url})' \
      | jq -M -r '.[].name?'
  fi

elif [[ "$1" = "search" ]]; then shift

  # Only the default branch is considered. In most cases, this will be the master branch.
  # Only files smaller than 384 KB are searchable.

  # q : queyr
  # sort : indexed , use this instead of Default: results are sorted by best match.
  # order : [asc|desc] , if sort order provided sort by ..

  # query examples

  # foo+in:file,path+language:js
  # foo+in:file+language:js
  # foo+in:path+language:js
  # foo+repo:jquery/jquery
  # alpine+user:hypoport
  # socat+in:file+filename:Dockerfile
  # haproxy+size:100
  # haproxy+size:>100
  # user:mozilla+language:markdown
  # forked:true  ## also include forked repos in result
  # foo+path:app/public
  # foo+path:cgi-bin+language:perl
  # foo+filename:.vimrc
  # foo+extension:sh
  # foo+path:cgi-bin+extension:pm
  # extension:sh+user:nasoym


  # in Qualifies which fields are searched. With this qualifier you can restrict the search to the file contents
  # (file), the file path (path), or both.
  # language Searches code based on the language it's written in.
  # fork Specifies that code from forked repositories should be searched (true). Repository forks will not be
  # searchable unless the fork has more stars than the parent repository.
  # size Finds files that match a certain size (in bytes).
  # path Specifies the path prefix that the resulting file must be under.
  # filename Matches files by a substring of the filename.
  # extension Matches files with a certain extension after a dot.
  # user or repo Limits searches to a specific user or repository.

  # https://developer.github.com/v3/search/#search-code

  search_query="$(urlencode_local "$@")"
  if [[ "$show_query" -eq 1 ]];then
    echo "query: >$search_query<"
    exit 0
  fi
  response="$(curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    -H 'Accept: application/vnd.github.v3.text-match+json' \
    "https://api.github.com/search/code\
?q=${search_query}\
&page=${page}&per_page=${page_size}\
"
  )"
  if [[ "$raw_output" -eq 1 ]];then
    echo "$response"
  else
    echo "$response" \
      | jq  ".total_count as \$count | .items|map({\
total_count:\$count,\
repository:(.repository.full_name),\
description:(.repository.description),\
content:(.repository.full_name+\"/contents/\"+.path),\
score,\
text_matches:(.text_matches|map({property,fragment}))\
})|reverse"
  fi

elif [[ "$1" = "info" ]]; then shift
  repo_name="$1"
  response="$(curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/repos/${repo_name}"
  )"
  if [[ "$raw_output" -eq 1 ]];then
    echo "$response"
  else
    jq  "
[.]|map({\
full_name\
,fork \
,created_at \
,updated_at \
,pushed_at \
,git_url \
,ssh_url \
,clone_url \
,homepage \
,size \
,stargazers_count \
,watchers_count \
,language \
,forks_count \
,forks \
,watchers \
,network_count \
,subscribers_count \
})[]\
" <<<"$response"
  fi

elif [[ "$1" = "content" ]]; then shift
  content_url="$1" ; shift
  curl \
    -s \
    -H 'Accept: application/vnd.github.v3.raw' \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/repos/${content_url}"

fi
