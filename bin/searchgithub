#!/usr/bin/env bash

set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

while getopts "h?p:s:r" options; do case $options in
  p) page="$OPTARG" ;;
  s) page_size="$OPTARG" ;;
  r) raw_output="1" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

: ${rc_file:="${HOME}/.searchgithub_rc"}
if [[ -r "${rc_file}" ]]; then
  if ( cd $( dirname $(realpath "$rc_file")); git diff-index --quiet HEAD -- ) && \
     ( cd $( dirname $(realpath "$rc_file")); git ls-files $(realpath "$rc_file") --error-unmatch ); then
    source "${rc_file}"
  else
    echo "the rc file was either not in git or uncommitted changes found" >&2
    exit 1
  fi
fi

: ${github_namespace:="$github_user"}
# : ${users_orgs:="orgs"}
: ${users_orgs:="users"}
: ${raw_output:="0"}
: ${page_size:="100"}
: ${page:="1"}

if [[ "$#" -eq 0 ]];then
  :

elif [[ "$1" = "list" ]]; then shift
  #TODO is 100 the max for entries per page ?
  user_name="$1"
  response="$(curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/${users_orgs}/${user_name}/repos?\
type=all\
&page=${page}&per_page=${page_size}\
" )"

  if [[ "$raw_output" -eq 1 ]];then
    echo "$response"
  else
    echo "$response" \
      | jq -M 'map({name,description,ssh_url})' \
      | jq -M -r '.[].name?'
  fi

elif [[ "$1" = "search" ]]; then shift
  # https://developer.github.com/v3/search/#search-code
  search_query="$@"
  # alpine+user:hypoport
  # socat+in:file+filename:Dockerfile
  response="$(curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    -H 'Accept: application/vnd.github.v3.text-match+json' \
    "https://api.github.com/search/code\
?q=${search_query}\
&page=${page}&per_page=${page_size}\
"
  )"
  if [[ "$raw_output" -eq 1 ]];then
    echo "$response"
  else
    echo "$response" \
      | jq  ".total_count as \$count | .items|map({\
total_count:\$count,\
name,\
path,\
repository:(.repository|{full_name,description}),\
text_matches:(.text_matches|map({object_type,property,fragment,matches}))\
})"
  fi

elif [[ "$1" = "info" ]]; then shift
  repo_name="$1"
  curl \
    -s \
    -u "${github_user}:${github_user_password}" \
    "https://api.github.com/repos/${repo_name}"

# elif [[ "$1" = "content" ]]; then shift
#   curl \
#     -s \
#     -u "${github_user}:${github_user_password}" \
#     "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md"

fi
